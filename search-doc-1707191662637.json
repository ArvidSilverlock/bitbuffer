[{"title":"bitbuffer","type":0,"sectionRef":"#","url":"/bitbuffer/api/bitbuffer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#functions","content":" "},{"title":"writeu1​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu1","content":"&lt;/&gt; bitbuffer.writeu1( b: buffer, offset: number, value: number ) → () Writes a 1 bit unsigned integer [0, 1]  "},{"title":"writeu2​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu2","content":"&lt;/&gt; bitbuffer.writeu2( b: buffer, offset: number, value: number ) → () Writes a 2 bit unsigned integer [0, 3]  "},{"title":"writeu3​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu3","content":"&lt;/&gt; bitbuffer.writeu3( b: buffer, offset: number, value: number ) → () Writes a 3 bit unsigned integer [0, 7]  "},{"title":"writeu4​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu4","content":"&lt;/&gt; bitbuffer.writeu4( b: buffer, offset: number, value: number ) → () Writes a 4 bit unsigned integer [0, 15]  "},{"title":"writeu5​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu5","content":"&lt;/&gt; bitbuffer.writeu5( b: buffer, offset: number, value: number ) → () Writes a 5 bit unsigned integer [0, 31]  "},{"title":"writeu6​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu6","content":"&lt;/&gt; bitbuffer.writeu6( b: buffer, offset: number, value: number ) → () Writes a 6 bit unsigned integer [0, 63]  "},{"title":"writeu7​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu7","content":"&lt;/&gt; bitbuffer.writeu7( b: buffer, offset: number, value: number ) → () Writes a 7 bit unsigned integer [0, 127]  "},{"title":"writeu8​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu8","content":"&lt;/&gt; bitbuffer.writeu8( b: buffer, offset: number, value: number ) → () Writes a 8 bit unsigned integer [0, 255]  "},{"title":"writeu9​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu9","content":"&lt;/&gt; bitbuffer.writeu9( b: buffer, offset: number, value: number ) → () Writes a 9 bit unsigned integer [0, 511]  "},{"title":"writeu10​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu10","content":"&lt;/&gt; bitbuffer.writeu10( b: buffer, offset: number, value: number ) → () Writes a 10 bit unsigned integer [0, 1023]  "},{"title":"writeu11​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu11","content":"&lt;/&gt; bitbuffer.writeu11( b: buffer, offset: number, value: number ) → () Writes a 11 bit unsigned integer [0, 2047]  "},{"title":"writeu12​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu12","content":"&lt;/&gt; bitbuffer.writeu12( b: buffer, offset: number, value: number ) → () Writes a 12 bit unsigned integer [0, 4095]  "},{"title":"writeu13​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu13","content":"&lt;/&gt; bitbuffer.writeu13( b: buffer, offset: number, value: number ) → () Writes a 13 bit unsigned integer [0, 8191]  "},{"title":"writeu14​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu14","content":"&lt;/&gt; bitbuffer.writeu14( b: buffer, offset: number, value: number ) → () Writes a 14 bit unsigned integer [0, 16383]  "},{"title":"writeu15​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu15","content":"&lt;/&gt; bitbuffer.writeu15( b: buffer, offset: number, value: number ) → () Writes a 15 bit unsigned integer [0, 32767]  "},{"title":"writeu16​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu16","content":"&lt;/&gt; bitbuffer.writeu16( b: buffer, offset: number, value: number ) → () Writes a 16 bit unsigned integer [0, 65535]  "},{"title":"writeu17​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu17","content":"&lt;/&gt; bitbuffer.writeu17( b: buffer, offset: number, value: number ) → () Writes a 17 bit unsigned integer [0, 131071]  "},{"title":"writeu18​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu18","content":"&lt;/&gt; bitbuffer.writeu18( b: buffer, offset: number, value: number ) → () Writes a 18 bit unsigned integer [0, 262143]  "},{"title":"writeu19​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu19","content":"&lt;/&gt; bitbuffer.writeu19( b: buffer, offset: number, value: number ) → () Writes a 19 bit unsigned integer [0, 524287]  "},{"title":"writeu20​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu20","content":"&lt;/&gt; bitbuffer.writeu20( b: buffer, offset: number, value: number ) → () Writes a 20 bit unsigned integer [0, 1048575]  "},{"title":"writeu21​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu21","content":"&lt;/&gt; bitbuffer.writeu21( b: buffer, offset: number, value: number ) → () Writes a 21 bit unsigned integer [0, 2097151]  "},{"title":"writeu22​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu22","content":"&lt;/&gt; bitbuffer.writeu22( b: buffer, offset: number, value: number ) → () Writes a 22 bit unsigned integer [0, 4194303]  "},{"title":"writeu23​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu23","content":"&lt;/&gt; bitbuffer.writeu23( b: buffer, offset: number, value: number ) → () Writes a 23 bit unsigned integer [0, 8388607]  "},{"title":"writeu24​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu24","content":"&lt;/&gt; bitbuffer.writeu24( b: buffer, offset: number, value: number ) → () Writes a 24 bit unsigned integer [0, 16777215]  "},{"title":"writeu25​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu25","content":"&lt;/&gt; bitbuffer.writeu25( b: buffer, offset: number, value: number ) → () Writes a 25 bit unsigned integer [0, 33554431]  "},{"title":"writeu26​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu26","content":"&lt;/&gt; bitbuffer.writeu26( b: buffer, offset: number, value: number ) → () Writes a 26 bit unsigned integer [0, 67108863]  "},{"title":"writeu27​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu27","content":"&lt;/&gt; bitbuffer.writeu27( b: buffer, offset: number, value: number ) → () Writes a 27 bit unsigned integer [0, 134217727]  "},{"title":"writeu28​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu28","content":"&lt;/&gt; bitbuffer.writeu28( b: buffer, offset: number, value: number ) → () Writes a 28 bit unsigned integer [0, 268435455]  "},{"title":"writeu29​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu29","content":"&lt;/&gt; bitbuffer.writeu29( b: buffer, offset: number, value: number ) → () Writes a 29 bit unsigned integer [0, 536870911]  "},{"title":"writeu30​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu30","content":"&lt;/&gt; bitbuffer.writeu30( b: buffer, offset: number, value: number ) → () Writes a 30 bit unsigned integer [0, 1073741823]  "},{"title":"writeu31​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu31","content":"&lt;/&gt; bitbuffer.writeu31( b: buffer, offset: number, value: number ) → () Writes a 31 bit unsigned integer [0, 2147483647]  "},{"title":"writeu32​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu32","content":"&lt;/&gt; bitbuffer.writeu32( b: buffer, offset: number, value: number ) → () Writes a 32 bit unsigned integer [0, 4294967295]  "},{"title":"writeu33​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu33","content":"&lt;/&gt; bitbuffer.writeu33( b: buffer, offset: number, value: number ) → () Writes a 33 bit unsigned integer [0, 8589934591]  "},{"title":"writeu34​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu34","content":"&lt;/&gt; bitbuffer.writeu34( b: buffer, offset: number, value: number ) → () Writes a 34 bit unsigned integer [0, 17179869183]  "},{"title":"writeu35​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu35","content":"&lt;/&gt; bitbuffer.writeu35( b: buffer, offset: number, value: number ) → () Writes a 35 bit unsigned integer [0, 34359738367]  "},{"title":"writeu36​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu36","content":"&lt;/&gt; bitbuffer.writeu36( b: buffer, offset: number, value: number ) → () Writes a 36 bit unsigned integer [0, 68719476735]  "},{"title":"writeu37​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu37","content":"&lt;/&gt; bitbuffer.writeu37( b: buffer, offset: number, value: number ) → () Writes a 37 bit unsigned integer [0, 137438953471]  "},{"title":"writeu38​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu38","content":"&lt;/&gt; bitbuffer.writeu38( b: buffer, offset: number, value: number ) → () Writes a 38 bit unsigned integer [0, 274877906943]  "},{"title":"writeu39​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu39","content":"&lt;/&gt; bitbuffer.writeu39( b: buffer, offset: number, value: number ) → () Writes a 39 bit unsigned integer [0, 549755813887]  "},{"title":"writeu40​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu40","content":"&lt;/&gt; bitbuffer.writeu40( b: buffer, offset: number, value: number ) → () Writes a 40 bit unsigned integer [0, 1099511627775]  "},{"title":"writeu41​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu41","content":"&lt;/&gt; bitbuffer.writeu41( b: buffer, offset: number, value: number ) → () Writes a 41 bit unsigned integer [0, 2199023255551]  "},{"title":"writeu42​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu42","content":"&lt;/&gt; bitbuffer.writeu42( b: buffer, offset: number, value: number ) → () Writes a 42 bit unsigned integer [0, 4398046511103]  "},{"title":"writeu43​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu43","content":"&lt;/&gt; bitbuffer.writeu43( b: buffer, offset: number, value: number ) → () Writes a 43 bit unsigned integer [0, 8796093022207]  "},{"title":"writeu44​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu44","content":"&lt;/&gt; bitbuffer.writeu44( b: buffer, offset: number, value: number ) → () Writes a 44 bit unsigned integer [0, 17592186044415]  "},{"title":"writeu45​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu45","content":"&lt;/&gt; bitbuffer.writeu45( b: buffer, offset: number, value: number ) → () Writes a 45 bit unsigned integer [0, 35184372088831]  "},{"title":"writeu46​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu46","content":"&lt;/&gt; bitbuffer.writeu46( b: buffer, offset: number, value: number ) → () Writes a 46 bit unsigned integer [0, 70368744177663]  "},{"title":"writeu47​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu47","content":"&lt;/&gt; bitbuffer.writeu47( b: buffer, offset: number, value: number ) → () Writes a 47 bit unsigned integer [0, 140737488355327]  "},{"title":"writeu48​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu48","content":"&lt;/&gt; bitbuffer.writeu48( b: buffer, offset: number, value: number ) → () Writes a 48 bit unsigned integer [0, 281474976710655]  "},{"title":"writeu49​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu49","content":"&lt;/&gt; bitbuffer.writeu49( b: buffer, offset: number, value: number ) → () Writes a 49 bit unsigned integer [0, 562949953421311]  "},{"title":"writeu50​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu50","content":"&lt;/&gt; bitbuffer.writeu50( b: buffer, offset: number, value: number ) → () Writes a 50 bit unsigned integer [0, 1125899906842623]  "},{"title":"writeu51​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu51","content":"&lt;/&gt; bitbuffer.writeu51( b: buffer, offset: number, value: number ) → () Writes a 51 bit unsigned integer [0, 2251799813685247]  "},{"title":"writeu52​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu52","content":"&lt;/&gt; bitbuffer.writeu52( b: buffer, offset: number, value: number ) → () Writes a 52 bit unsigned integer [0, 4503599627370495]  "},{"title":"writeu53​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writeu53","content":"&lt;/&gt; bitbuffer.writeu53( b: buffer, offset: number, value: number ) → () Writes a 53 bit unsigned integer [0, 9007199254740991]  "},{"title":"readu1​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu1","content":"&lt;/&gt; bitbuffer.readu1( b: buffer, offset: number ) → number Writes a 1 bit unsigned integer [0, 1]  "},{"title":"readu2​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu2","content":"&lt;/&gt; bitbuffer.readu2( b: buffer, offset: number ) → number Writes a 2 bit unsigned integer [0, 3]  "},{"title":"readu3​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu3","content":"&lt;/&gt; bitbuffer.readu3( b: buffer, offset: number ) → number Writes a 3 bit unsigned integer [0, 7]  "},{"title":"readu4​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu4","content":"&lt;/&gt; bitbuffer.readu4( b: buffer, offset: number ) → number Writes a 4 bit unsigned integer [0, 15]  "},{"title":"readu5​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu5","content":"&lt;/&gt; bitbuffer.readu5( b: buffer, offset: number ) → number Writes a 5 bit unsigned integer [0, 31]  "},{"title":"readu6​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu6","content":"&lt;/&gt; bitbuffer.readu6( b: buffer, offset: number ) → number Writes a 6 bit unsigned integer [0, 63]  "},{"title":"readu7​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu7","content":"&lt;/&gt; bitbuffer.readu7( b: buffer, offset: number ) → number Writes a 7 bit unsigned integer [0, 127]  "},{"title":"readu8​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu8","content":"&lt;/&gt; bitbuffer.readu8( b: buffer, offset: number ) → number Writes a 8 bit unsigned integer [0, 255]  "},{"title":"readu9​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu9","content":"&lt;/&gt; bitbuffer.readu9( b: buffer, offset: number ) → number Writes a 9 bit unsigned integer [0, 511]  "},{"title":"readu10​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu10","content":"&lt;/&gt; bitbuffer.readu10( b: buffer, offset: number ) → number Writes a 10 bit unsigned integer [0, 1023]  "},{"title":"readu11​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu11","content":"&lt;/&gt; bitbuffer.readu11( b: buffer, offset: number ) → number Writes a 11 bit unsigned integer [0, 2047]  "},{"title":"readu12​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu12","content":"&lt;/&gt; bitbuffer.readu12( b: buffer, offset: number ) → number Writes a 12 bit unsigned integer [0, 4095]  "},{"title":"readu13​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu13","content":"&lt;/&gt; bitbuffer.readu13( b: buffer, offset: number ) → number Writes a 13 bit unsigned integer [0, 8191]  "},{"title":"readu14​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu14","content":"&lt;/&gt; bitbuffer.readu14( b: buffer, offset: number ) → number Writes a 14 bit unsigned integer [0, 16383]  "},{"title":"readu15​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu15","content":"&lt;/&gt; bitbuffer.readu15( b: buffer, offset: number ) → number Writes a 15 bit unsigned integer [0, 32767]  "},{"title":"readu16​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu16","content":"&lt;/&gt; bitbuffer.readu16( b: buffer, offset: number ) → number Writes a 16 bit unsigned integer [0, 65535]  "},{"title":"readu17​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu17","content":"&lt;/&gt; bitbuffer.readu17( b: buffer, offset: number ) → number Writes a 17 bit unsigned integer [0, 131071]  "},{"title":"readu18​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu18","content":"&lt;/&gt; bitbuffer.readu18( b: buffer, offset: number ) → number Writes a 18 bit unsigned integer [0, 262143]  "},{"title":"readu19​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu19","content":"&lt;/&gt; bitbuffer.readu19( b: buffer, offset: number ) → number Writes a 19 bit unsigned integer [0, 524287]  "},{"title":"readu20​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu20","content":"&lt;/&gt; bitbuffer.readu20( b: buffer, offset: number ) → number Writes a 20 bit unsigned integer [0, 1048575]  "},{"title":"readu21​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu21","content":"&lt;/&gt; bitbuffer.readu21( b: buffer, offset: number ) → number Writes a 21 bit unsigned integer [0, 2097151]  "},{"title":"readu22​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu22","content":"&lt;/&gt; bitbuffer.readu22( b: buffer, offset: number ) → number Writes a 22 bit unsigned integer [0, 4194303]  "},{"title":"readu23​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu23","content":"&lt;/&gt; bitbuffer.readu23( b: buffer, offset: number ) → number Writes a 23 bit unsigned integer [0, 8388607]  "},{"title":"readu24​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu24","content":"&lt;/&gt; bitbuffer.readu24( b: buffer, offset: number ) → number Writes a 24 bit unsigned integer [0, 16777215]  "},{"title":"readu25​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu25","content":"&lt;/&gt; bitbuffer.readu25( b: buffer, offset: number ) → number Writes a 25 bit unsigned integer [0, 33554431]  "},{"title":"readu26​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu26","content":"&lt;/&gt; bitbuffer.readu26( b: buffer, offset: number ) → number Writes a 26 bit unsigned integer [0, 67108863]  "},{"title":"readu27​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu27","content":"&lt;/&gt; bitbuffer.readu27( b: buffer, offset: number ) → number Writes a 27 bit unsigned integer [0, 134217727]  "},{"title":"readu28​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu28","content":"&lt;/&gt; bitbuffer.readu28( b: buffer, offset: number ) → number Writes a 28 bit unsigned integer [0, 268435455]  "},{"title":"readu29​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu29","content":"&lt;/&gt; bitbuffer.readu29( b: buffer, offset: number ) → number Writes a 29 bit unsigned integer [0, 536870911]  "},{"title":"readu30​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu30","content":"&lt;/&gt; bitbuffer.readu30( b: buffer, offset: number ) → number Writes a 30 bit unsigned integer [0, 1073741823]  "},{"title":"readu31​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu31","content":"&lt;/&gt; bitbuffer.readu31( b: buffer, offset: number ) → number Writes a 31 bit unsigned integer [0, 2147483647]  "},{"title":"readu32​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu32","content":"&lt;/&gt; bitbuffer.readu32( b: buffer, offset: number ) → number Writes a 32 bit unsigned integer [0, 4294967295]  "},{"title":"readu33​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu33","content":"&lt;/&gt; bitbuffer.readu33( b: buffer, offset: number ) → number Writes a 33 bit unsigned integer [0, 8589934591]  "},{"title":"readu34​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu34","content":"&lt;/&gt; bitbuffer.readu34( b: buffer, offset: number ) → number Writes a 34 bit unsigned integer [0, 17179869183]  "},{"title":"readu35​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu35","content":"&lt;/&gt; bitbuffer.readu35( b: buffer, offset: number ) → number Writes a 35 bit unsigned integer [0, 34359738367]  "},{"title":"readu36​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu36","content":"&lt;/&gt; bitbuffer.readu36( b: buffer, offset: number ) → number Writes a 36 bit unsigned integer [0, 68719476735]  "},{"title":"readu37​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu37","content":"&lt;/&gt; bitbuffer.readu37( b: buffer, offset: number ) → number Writes a 37 bit unsigned integer [0, 137438953471]  "},{"title":"readu38​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu38","content":"&lt;/&gt; bitbuffer.readu38( b: buffer, offset: number ) → number Writes a 38 bit unsigned integer [0, 274877906943]  "},{"title":"readu39​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu39","content":"&lt;/&gt; bitbuffer.readu39( b: buffer, offset: number ) → number Writes a 39 bit unsigned integer [0, 549755813887]  "},{"title":"readu40​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu40","content":"&lt;/&gt; bitbuffer.readu40( b: buffer, offset: number ) → number Writes a 40 bit unsigned integer [0, 1099511627775]  "},{"title":"readu41​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu41","content":"&lt;/&gt; bitbuffer.readu41( b: buffer, offset: number ) → number Writes a 41 bit unsigned integer [0, 2199023255551]  "},{"title":"readu42​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu42","content":"&lt;/&gt; bitbuffer.readu42( b: buffer, offset: number ) → number Writes a 42 bit unsigned integer [0, 4398046511103]  "},{"title":"readu43​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu43","content":"&lt;/&gt; bitbuffer.readu43( b: buffer, offset: number ) → number Writes a 43 bit unsigned integer [0, 8796093022207]  "},{"title":"readu44​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu44","content":"&lt;/&gt; bitbuffer.readu44( b: buffer, offset: number ) → number Writes a 44 bit unsigned integer [0, 17592186044415]  "},{"title":"readu45​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu45","content":"&lt;/&gt; bitbuffer.readu45( b: buffer, offset: number ) → number Writes a 45 bit unsigned integer [0, 35184372088831]  "},{"title":"readu46​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu46","content":"&lt;/&gt; bitbuffer.readu46( b: buffer, offset: number ) → number Writes a 46 bit unsigned integer [0, 70368744177663]  "},{"title":"readu47​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu47","content":"&lt;/&gt; bitbuffer.readu47( b: buffer, offset: number ) → number Writes a 47 bit unsigned integer [0, 140737488355327]  "},{"title":"readu48​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu48","content":"&lt;/&gt; bitbuffer.readu48( b: buffer, offset: number ) → number Writes a 48 bit unsigned integer [0, 281474976710655]  "},{"title":"readu49​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu49","content":"&lt;/&gt; bitbuffer.readu49( b: buffer, offset: number ) → number Writes a 49 bit unsigned integer [0, 562949953421311]  "},{"title":"readu50​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu50","content":"&lt;/&gt; bitbuffer.readu50( b: buffer, offset: number ) → number Writes a 50 bit unsigned integer [0, 1125899906842623]  "},{"title":"readu51​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu51","content":"&lt;/&gt; bitbuffer.readu51( b: buffer, offset: number ) → number Writes a 51 bit unsigned integer [0, 2251799813685247]  "},{"title":"readu52​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu52","content":"&lt;/&gt; bitbuffer.readu52( b: buffer, offset: number ) → number Writes a 52 bit unsigned integer [0, 4503599627370495]  "},{"title":"readu53​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readu53","content":"&lt;/&gt; bitbuffer.readu53( b: buffer, offset: number ) → number Writes a 53 bit unsigned integer [0, 9007199254740991]  "},{"title":"writei2​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei2","content":"&lt;/&gt; bitbuffer.writei2( b: buffer, offset: number, value: number ) → () Writes a 2 bit signed integer [-4, 3]  "},{"title":"writei3​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei3","content":"&lt;/&gt; bitbuffer.writei3( b: buffer, offset: number, value: number ) → () Writes a 3 bit signed integer [-8, 7]  "},{"title":"writei4​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei4","content":"&lt;/&gt; bitbuffer.writei4( b: buffer, offset: number, value: number ) → () Writes a 4 bit signed integer [-16, 15]  "},{"title":"writei5​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei5","content":"&lt;/&gt; bitbuffer.writei5( b: buffer, offset: number, value: number ) → () Writes a 5 bit signed integer [-32, 31]  "},{"title":"writei6​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei6","content":"&lt;/&gt; bitbuffer.writei6( b: buffer, offset: number, value: number ) → () Writes a 6 bit signed integer [-64, 63]  "},{"title":"writei7​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei7","content":"&lt;/&gt; bitbuffer.writei7( b: buffer, offset: number, value: number ) → () Writes a 7 bit signed integer [-128, 127]  "},{"title":"writei8​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei8","content":"&lt;/&gt; bitbuffer.writei8( b: buffer, offset: number, value: number ) → () Writes a 8 bit signed integer [-256, 255]  "},{"title":"writei9​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei9","content":"&lt;/&gt; bitbuffer.writei9( b: buffer, offset: number, value: number ) → () Writes a 9 bit signed integer [-512, 511]  "},{"title":"writei10​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei10","content":"&lt;/&gt; bitbuffer.writei10( b: buffer, offset: number, value: number ) → () Writes a 10 bit signed integer [-1024, 1023]  "},{"title":"writei11​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei11","content":"&lt;/&gt; bitbuffer.writei11( b: buffer, offset: number, value: number ) → () Writes a 11 bit signed integer [-2048, 2047]  "},{"title":"writei12​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei12","content":"&lt;/&gt; bitbuffer.writei12( b: buffer, offset: number, value: number ) → () Writes a 12 bit signed integer [-4096, 4095]  "},{"title":"writei13​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei13","content":"&lt;/&gt; bitbuffer.writei13( b: buffer, offset: number, value: number ) → () Writes a 13 bit signed integer [-8192, 8191]  "},{"title":"writei14​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei14","content":"&lt;/&gt; bitbuffer.writei14( b: buffer, offset: number, value: number ) → () Writes a 14 bit signed integer [-16384, 16383]  "},{"title":"writei15​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei15","content":"&lt;/&gt; bitbuffer.writei15( b: buffer, offset: number, value: number ) → () Writes a 15 bit signed integer [-32768, 32767]  "},{"title":"writei16​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei16","content":"&lt;/&gt; bitbuffer.writei16( b: buffer, offset: number, value: number ) → () Writes a 16 bit signed integer [-65536, 65535]  "},{"title":"writei17​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei17","content":"&lt;/&gt; bitbuffer.writei17( b: buffer, offset: number, value: number ) → () Writes a 17 bit signed integer [-131072, 131071]  "},{"title":"writei18​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei18","content":"&lt;/&gt; bitbuffer.writei18( b: buffer, offset: number, value: number ) → () Writes a 18 bit signed integer [-262144, 262143]  "},{"title":"writei19​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei19","content":"&lt;/&gt; bitbuffer.writei19( b: buffer, offset: number, value: number ) → () Writes a 19 bit signed integer [-524288, 524287]  "},{"title":"writei20​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei20","content":"&lt;/&gt; bitbuffer.writei20( b: buffer, offset: number, value: number ) → () Writes a 20 bit signed integer [-1048576, 1048575]  "},{"title":"writei21​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei21","content":"&lt;/&gt; bitbuffer.writei21( b: buffer, offset: number, value: number ) → () Writes a 21 bit signed integer [-2097152, 2097151]  "},{"title":"writei22​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei22","content":"&lt;/&gt; bitbuffer.writei22( b: buffer, offset: number, value: number ) → () Writes a 22 bit signed integer [-4194304, 4194303]  "},{"title":"writei23​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei23","content":"&lt;/&gt; bitbuffer.writei23( b: buffer, offset: number, value: number ) → () Writes a 23 bit signed integer [-8388608, 8388607]  "},{"title":"writei24​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei24","content":"&lt;/&gt; bitbuffer.writei24( b: buffer, offset: number, value: number ) → () Writes a 24 bit signed integer [-16777216, 16777215]  "},{"title":"writei25​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei25","content":"&lt;/&gt; bitbuffer.writei25( b: buffer, offset: number, value: number ) → () Writes a 25 bit signed integer [-33554432, 33554431]  "},{"title":"writei26​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei26","content":"&lt;/&gt; bitbuffer.writei26( b: buffer, offset: number, value: number ) → () Writes a 26 bit signed integer [-67108864, 67108863]  "},{"title":"writei27​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei27","content":"&lt;/&gt; bitbuffer.writei27( b: buffer, offset: number, value: number ) → () Writes a 27 bit signed integer [-134217728, 134217727]  "},{"title":"writei28​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei28","content":"&lt;/&gt; bitbuffer.writei28( b: buffer, offset: number, value: number ) → () Writes a 28 bit signed integer [-268435456, 268435455]  "},{"title":"writei29​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei29","content":"&lt;/&gt; bitbuffer.writei29( b: buffer, offset: number, value: number ) → () Writes a 29 bit signed integer [-536870912, 536870911]  "},{"title":"writei30​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei30","content":"&lt;/&gt; bitbuffer.writei30( b: buffer, offset: number, value: number ) → () Writes a 30 bit signed integer [-1073741824, 1073741823]  "},{"title":"writei31​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei31","content":"&lt;/&gt; bitbuffer.writei31( b: buffer, offset: number, value: number ) → () Writes a 31 bit signed integer [-2147483648, 2147483647]  "},{"title":"writei32​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei32","content":"&lt;/&gt; bitbuffer.writei32( b: buffer, offset: number, value: number ) → () Writes a 32 bit signed integer [-4294967296, 4294967295]  "},{"title":"writei33​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei33","content":"&lt;/&gt; bitbuffer.writei33( b: buffer, offset: number, value: number ) → () Writes a 33 bit signed integer [-8589934592, 8589934591]  "},{"title":"writei34​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei34","content":"&lt;/&gt; bitbuffer.writei34( b: buffer, offset: number, value: number ) → () Writes a 34 bit signed integer [-17179869184, 17179869183]  "},{"title":"writei35​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei35","content":"&lt;/&gt; bitbuffer.writei35( b: buffer, offset: number, value: number ) → () Writes a 35 bit signed integer [-34359738368, 34359738367]  "},{"title":"writei36​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei36","content":"&lt;/&gt; bitbuffer.writei36( b: buffer, offset: number, value: number ) → () Writes a 36 bit signed integer [-68719476736, 68719476735]  "},{"title":"writei37​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei37","content":"&lt;/&gt; bitbuffer.writei37( b: buffer, offset: number, value: number ) → () Writes a 37 bit signed integer [-137438953472, 137438953471]  "},{"title":"writei38​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei38","content":"&lt;/&gt; bitbuffer.writei38( b: buffer, offset: number, value: number ) → () Writes a 38 bit signed integer [-274877906944, 274877906943]  "},{"title":"writei39​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei39","content":"&lt;/&gt; bitbuffer.writei39( b: buffer, offset: number, value: number ) → () Writes a 39 bit signed integer [-549755813888, 549755813887]  "},{"title":"writei40​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei40","content":"&lt;/&gt; bitbuffer.writei40( b: buffer, offset: number, value: number ) → () Writes a 40 bit signed integer [-1099511627776, 1099511627775]  "},{"title":"writei41​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei41","content":"&lt;/&gt; bitbuffer.writei41( b: buffer, offset: number, value: number ) → () Writes a 41 bit signed integer [-2199023255552, 2199023255551]  "},{"title":"writei42​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei42","content":"&lt;/&gt; bitbuffer.writei42( b: buffer, offset: number, value: number ) → () Writes a 42 bit signed integer [-4398046511104, 4398046511103]  "},{"title":"writei43​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei43","content":"&lt;/&gt; bitbuffer.writei43( b: buffer, offset: number, value: number ) → () Writes a 43 bit signed integer [-8796093022208, 8796093022207]  "},{"title":"writei44​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei44","content":"&lt;/&gt; bitbuffer.writei44( b: buffer, offset: number, value: number ) → () Writes a 44 bit signed integer [-17592186044416, 17592186044415]  "},{"title":"writei45​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei45","content":"&lt;/&gt; bitbuffer.writei45( b: buffer, offset: number, value: number ) → () Writes a 45 bit signed integer [-35184372088832, 35184372088831]  "},{"title":"writei46​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei46","content":"&lt;/&gt; bitbuffer.writei46( b: buffer, offset: number, value: number ) → () Writes a 46 bit signed integer [-70368744177664, 70368744177663]  "},{"title":"writei47​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei47","content":"&lt;/&gt; bitbuffer.writei47( b: buffer, offset: number, value: number ) → () Writes a 47 bit signed integer [-140737488355328, 140737488355327]  "},{"title":"writei48​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei48","content":"&lt;/&gt; bitbuffer.writei48( b: buffer, offset: number, value: number ) → () Writes a 48 bit signed integer [-281474976710656, 281474976710655]  "},{"title":"writei49​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei49","content":"&lt;/&gt; bitbuffer.writei49( b: buffer, offset: number, value: number ) → () Writes a 49 bit signed integer [-562949953421312, 562949953421311]  "},{"title":"writei50​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei50","content":"&lt;/&gt; bitbuffer.writei50( b: buffer, offset: number, value: number ) → () Writes a 50 bit signed integer [-1125899906842624, 1125899906842623]  "},{"title":"writei51​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei51","content":"&lt;/&gt; bitbuffer.writei51( b: buffer, offset: number, value: number ) → () Writes a 51 bit signed integer [-2251799813685248, 2251799813685247]  "},{"title":"writei52​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writei52","content":"&lt;/&gt; bitbuffer.writei52( b: buffer, offset: number, value: number ) → () Writes a 52 bit signed integer [-4503599627370496, 4503599627370495]  "},{"title":"readi2​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi2","content":"&lt;/&gt; bitbuffer.readi2( b: buffer, offset: number ) → number Reads a 2 bit signed integer [-4, 3]  "},{"title":"readi3​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi3","content":"&lt;/&gt; bitbuffer.readi3( b: buffer, offset: number ) → number Reads a 3 bit signed integer [-8, 7]  "},{"title":"readi4​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi4","content":"&lt;/&gt; bitbuffer.readi4( b: buffer, offset: number ) → number Reads a 4 bit signed integer [-16, 15]  "},{"title":"readi5​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi5","content":"&lt;/&gt; bitbuffer.readi5( b: buffer, offset: number ) → number Reads a 5 bit signed integer [-32, 31]  "},{"title":"readi6​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi6","content":"&lt;/&gt; bitbuffer.readi6( b: buffer, offset: number ) → number Reads a 6 bit signed integer [-64, 63]  "},{"title":"readi7​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi7","content":"&lt;/&gt; bitbuffer.readi7( b: buffer, offset: number ) → number Reads a 7 bit signed integer [-128, 127]  "},{"title":"readi8​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi8","content":"&lt;/&gt; bitbuffer.readi8( b: buffer, offset: number ) → number Reads a 8 bit signed integer [-256, 255]  "},{"title":"readi9​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi9","content":"&lt;/&gt; bitbuffer.readi9( b: buffer, offset: number ) → number Reads a 9 bit signed integer [-512, 511]  "},{"title":"readi10​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi10","content":"&lt;/&gt; bitbuffer.readi10( b: buffer, offset: number ) → number Reads a 10 bit signed integer [-1024, 1023]  "},{"title":"readi11​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi11","content":"&lt;/&gt; bitbuffer.readi11( b: buffer, offset: number ) → number Reads a 11 bit signed integer [-2048, 2047]  "},{"title":"readi12​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi12","content":"&lt;/&gt; bitbuffer.readi12( b: buffer, offset: number ) → number Reads a 12 bit signed integer [-4096, 4095]  "},{"title":"readi13​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi13","content":"&lt;/&gt; bitbuffer.readi13( b: buffer, offset: number ) → number Reads a 13 bit signed integer [-8192, 8191]  "},{"title":"readi14​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi14","content":"&lt;/&gt; bitbuffer.readi14( b: buffer, offset: number ) → number Reads a 14 bit signed integer [-16384, 16383]  "},{"title":"readi15​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi15","content":"&lt;/&gt; bitbuffer.readi15( b: buffer, offset: number ) → number Reads a 15 bit signed integer [-32768, 32767]  "},{"title":"readi16​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi16","content":"&lt;/&gt; bitbuffer.readi16( b: buffer, offset: number ) → number Reads a 16 bit signed integer [-65536, 65535]  "},{"title":"readi17​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi17","content":"&lt;/&gt; bitbuffer.readi17( b: buffer, offset: number ) → number Reads a 17 bit signed integer [-131072, 131071]  "},{"title":"readi18​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi18","content":"&lt;/&gt; bitbuffer.readi18( b: buffer, offset: number ) → number Reads a 18 bit signed integer [-262144, 262143]  "},{"title":"readi19​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi19","content":"&lt;/&gt; bitbuffer.readi19( b: buffer, offset: number ) → number Reads a 19 bit signed integer [-524288, 524287]  "},{"title":"readi20​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi20","content":"&lt;/&gt; bitbuffer.readi20( b: buffer, offset: number ) → number Reads a 20 bit signed integer [-1048576, 1048575]  "},{"title":"readi21​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi21","content":"&lt;/&gt; bitbuffer.readi21( b: buffer, offset: number ) → number Reads a 21 bit signed integer [-2097152, 2097151]  "},{"title":"readi22​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi22","content":"&lt;/&gt; bitbuffer.readi22( b: buffer, offset: number ) → number Reads a 22 bit signed integer [-4194304, 4194303]  "},{"title":"readi23​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi23","content":"&lt;/&gt; bitbuffer.readi23( b: buffer, offset: number ) → number Reads a 23 bit signed integer [-8388608, 8388607]  "},{"title":"readi24​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi24","content":"&lt;/&gt; bitbuffer.readi24( b: buffer, offset: number ) → number Reads a 24 bit signed integer [-16777216, 16777215]  "},{"title":"readi25​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi25","content":"&lt;/&gt; bitbuffer.readi25( b: buffer, offset: number ) → number Reads a 25 bit signed integer [-33554432, 33554431]  "},{"title":"readi26​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi26","content":"&lt;/&gt; bitbuffer.readi26( b: buffer, offset: number ) → number Reads a 26 bit signed integer [-67108864, 67108863]  "},{"title":"readi27​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi27","content":"&lt;/&gt; bitbuffer.readi27( b: buffer, offset: number ) → number Reads a 27 bit signed integer [-134217728, 134217727]  "},{"title":"readi28​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi28","content":"&lt;/&gt; bitbuffer.readi28( b: buffer, offset: number ) → number Reads a 28 bit signed integer [-268435456, 268435455]  "},{"title":"readi29​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi29","content":"&lt;/&gt; bitbuffer.readi29( b: buffer, offset: number ) → number Reads a 29 bit signed integer [-536870912, 536870911]  "},{"title":"readi30​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi30","content":"&lt;/&gt; bitbuffer.readi30( b: buffer, offset: number ) → number Reads a 30 bit signed integer [-1073741824, 1073741823]  "},{"title":"readi31​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi31","content":"&lt;/&gt; bitbuffer.readi31( b: buffer, offset: number ) → number Reads a 31 bit signed integer [-2147483648, 2147483647]  "},{"title":"readi32​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi32","content":"&lt;/&gt; bitbuffer.readi32( b: buffer, offset: number ) → number Reads a 32 bit signed integer [-4294967296, 4294967295]  "},{"title":"readi33​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi33","content":"&lt;/&gt; bitbuffer.readi33( b: buffer, offset: number ) → number Reads a 33 bit signed integer [-8589934592, 8589934591]  "},{"title":"readi34​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi34","content":"&lt;/&gt; bitbuffer.readi34( b: buffer, offset: number ) → number Reads a 34 bit signed integer [-17179869184, 17179869183]  "},{"title":"readi35​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi35","content":"&lt;/&gt; bitbuffer.readi35( b: buffer, offset: number ) → number Reads a 35 bit signed integer [-34359738368, 34359738367]  "},{"title":"readi36​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi36","content":"&lt;/&gt; bitbuffer.readi36( b: buffer, offset: number ) → number Reads a 36 bit signed integer [-68719476736, 68719476735]  "},{"title":"readi37​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi37","content":"&lt;/&gt; bitbuffer.readi37( b: buffer, offset: number ) → number Reads a 37 bit signed integer [-137438953472, 137438953471]  "},{"title":"readi38​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi38","content":"&lt;/&gt; bitbuffer.readi38( b: buffer, offset: number ) → number Reads a 38 bit signed integer [-274877906944, 274877906943]  "},{"title":"readi39​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi39","content":"&lt;/&gt; bitbuffer.readi39( b: buffer, offset: number ) → number Reads a 39 bit signed integer [-549755813888, 549755813887]  "},{"title":"readi40​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi40","content":"&lt;/&gt; bitbuffer.readi40( b: buffer, offset: number ) → number Reads a 40 bit signed integer [-1099511627776, 1099511627775]  "},{"title":"readi41​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi41","content":"&lt;/&gt; bitbuffer.readi41( b: buffer, offset: number ) → number Reads a 41 bit signed integer [-2199023255552, 2199023255551]  "},{"title":"readi42​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi42","content":"&lt;/&gt; bitbuffer.readi42( b: buffer, offset: number ) → number Reads a 42 bit signed integer [-4398046511104, 4398046511103]  "},{"title":"readi43​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi43","content":"&lt;/&gt; bitbuffer.readi43( b: buffer, offset: number ) → number Reads a 43 bit signed integer [-8796093022208, 8796093022207]  "},{"title":"readi44​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi44","content":"&lt;/&gt; bitbuffer.readi44( b: buffer, offset: number ) → number Reads a 44 bit signed integer [-17592186044416, 17592186044415]  "},{"title":"readi45​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi45","content":"&lt;/&gt; bitbuffer.readi45( b: buffer, offset: number ) → number Reads a 45 bit signed integer [-35184372088832, 35184372088831]  "},{"title":"readi46​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi46","content":"&lt;/&gt; bitbuffer.readi46( b: buffer, offset: number ) → number Reads a 46 bit signed integer [-70368744177664, 70368744177663]  "},{"title":"readi47​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi47","content":"&lt;/&gt; bitbuffer.readi47( b: buffer, offset: number ) → number Reads a 47 bit signed integer [-140737488355328, 140737488355327]  "},{"title":"readi48​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi48","content":"&lt;/&gt; bitbuffer.readi48( b: buffer, offset: number ) → number Reads a 48 bit signed integer [-281474976710656, 281474976710655]  "},{"title":"readi49​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi49","content":"&lt;/&gt; bitbuffer.readi49( b: buffer, offset: number ) → number Reads a 49 bit signed integer [-562949953421312, 562949953421311]  "},{"title":"readi50​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi50","content":"&lt;/&gt; bitbuffer.readi50( b: buffer, offset: number ) → number Reads a 50 bit signed integer [-1125899906842624, 1125899906842623]  "},{"title":"readi51​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi51","content":"&lt;/&gt; bitbuffer.readi51( b: buffer, offset: number ) → number Reads a 51 bit signed integer [-2251799813685248, 2251799813685247]  "},{"title":"readi52​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readi52","content":"&lt;/&gt; bitbuffer.readi52( b: buffer, offset: number ) → number Reads a 52 bit signed integer [-4503599627370496, 4503599627370495]  "},{"title":"writef16​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writef16","content":"&lt;/&gt; bitbuffer.writef16( b: buffer, offset: number, value: number ) → () Writes a Half-precision IEEE 754 number  "},{"title":"writef32​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writef32","content":"&lt;/&gt; bitbuffer.writef32( b: buffer, offset: number, value: number ) → () Writes a Single-precision IEEE 754 number  "},{"title":"writef64​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writef64","content":"&lt;/&gt; bitbuffer.writef64( b: buffer, offset: number, value: number ) → () Writes a Double-precision IEEE 754 number  "},{"title":"readf16​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readf16","content":"&lt;/&gt; bitbuffer.readf16( b: buffer, offset: number ) → number Reads a Half-precision IEEE 754 number  "},{"title":"readf32​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readf32","content":"&lt;/&gt; bitbuffer.readf32( b: buffer, offset: number ) → number Reads a Single-precision IEEE 754 number  "},{"title":"readf64​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readf64","content":"&lt;/&gt; bitbuffer.readf64( b: buffer, offset: number ) → number Reads a Double-precision IEEE 754 number  "},{"title":"readstring​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#readstring","content":"&lt;/&gt; bitbuffer.readstring( b: buffer, offset: number, count: number ) → string Used to write data from a string into the buffer at a specified offset. If an optional ‘count’ is specified, only ‘count’ bytes are taken from the string. Count cannot be larger than the string length.  "},{"title":"writestring​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#writestring","content":"&lt;/&gt; bitbuffer.writestring( b: buffer, offset: number, value: string, count: number? ) → () Used to read a string of length ‘count’ from the buffer at specified offset.  "},{"title":"fill​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#fill","content":"&lt;/&gt; bitbuffer.fill( b: buffer, offset: number, value: number, count: number? ) → () Sets the ‘count’ bytes in the buffer starting at the specified ‘offset’ to the ‘value’. If ‘count’ is ‘nil’ or is omitted, all bytes from the specified offset until the end of the buffer are set.  "},{"title":"copy​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#copy","content":"&lt;/&gt; bitbuffer.copy( target: buffer, targetOffset: number, source: buffer, sourceOffset: number?, count: number? ) → () Copy ‘count’ bytes from ‘source’ starting at offset ‘sourceOffset’ into the ‘target’ at ‘targetOffset’. Unlike buffer.copy, it is not possible for ‘source’ and ‘target’ to be the same and then copy an overlapping region. This may be added in future. If ‘sourceOffset’ is nil or is omitted, it defaults to 0. If ‘count’ is ‘nil’ or is omitted, the whole ‘source’ data starting from ‘sourceOffset’ is copied.  "},{"title":"tobinary​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#tobinary","content":"&lt;/&gt; bitbuffer.tobinary( b: buffer, separator: string-- the separator characters to use between bytes ) → string Returns the buffer data as a 'binary' string, mainly useful for debugging.  "},{"title":"frombinary​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#frombinary","content":"&lt;/&gt; bitbuffer.frombinary( str: string, separator: string-- the separator characters to use between bytes ) → buffer Creates a buffer initialized to the contents of the 'binary' string.  "},{"title":"tobinary​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#tobinary","content":"&lt;/&gt; bitbuffer.tobinary( b: buffer, separator: string-- the separator characters to use between bytes ) → string Returns the buffer data as a hexadecimal string, mainly useful for debugging.  "},{"title":"fromhexadecimal​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#fromhexadecimal","content":"&lt;/&gt; bitbuffer.fromhexadecimal( str: string, separator: string-- the separator characters to use between bytes ) → buffer Creates a buffer initialized to the contents of the hexadecimal string.  "},{"title":"tobase64​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#tobase64","content":"&lt;/&gt; bitbuffer.tobase64(b: buffer) → string Returns the buffer data as a base64 encoded string.  "},{"title":"frombase64​","type":1,"pageTitle":"bitbuffer","url":"/bitbuffer/api/bitbuffer#frombase64","content":"&lt;/&gt; bitbuffer.frombase64(str: string) → buffer Creates a buffer initialized to the contents of the base64 encoded string. "}]