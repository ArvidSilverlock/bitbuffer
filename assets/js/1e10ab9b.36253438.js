"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[264],{58625:e=>{e.exports=JSON.parse('{"functions":[{"name":"Variadic","desc":"Writes a varying amount of values of the same type","params":[{"name":"writeCallback","desc":"","lua_type":"<T>(self, value: T) -> ()"},{"name":"...","desc":"","lua_type":"T"}],"returns":[],"function_type":"method","source":{"line":141,"path":"src/Editors/Writer.lua"}},{"name":"UInt","desc":"Writes an unsigned integer of any width from 1-53","params":[{"name":"value","desc":"The uint to write","lua_type":"number"},{"name":"width","desc":"The bit width of the `value`","lua_type":"number"},{"name":"updateByteOffset","desc":"Whether or not to update information on the current byte, used internally to reduce unnecessary calculations.","lua_type":"boolean"}],"returns":[],"function_type":"method","source":{"line":157,"path":"src/Editors/Writer.lua"}},{"name":"Int","desc":"Writes a signed integer of any width from 1-53, note that one of these bits is used as the sign","params":[{"name":"value","desc":"","lua_type":"number"},{"name":"width","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":171,"path":"src/Editors/Writer.lua"}},{"name":"Boolean","desc":"Writes a boolean","params":[{"name":"value","desc":"","lua_type":"boolean"}],"returns":[],"function_type":"method","source":{"line":183,"path":"src/Editors/Writer.lua"}},{"name":"String","desc":"Writes a string with its length encoded using a specified number of bits","params":[{"name":"value","desc":"","lua_type":"string"},{"name":"lengthWidth","desc":"Amount of bits to encode the string length with, defaults to 16","lua_type":"number?"}],"returns":[],"function_type":"method","source":{"line":195,"path":"src/Editors/Writer.lua"}},{"name":"NullTerminatedString","desc":"Writes a string then a byte with the value 0 after the string, but doesn\'t encode the length.\\nThe `Reader` will read all bytes until a 0 is found.\\n\\nNote that this assumes there is no character with a value of `0` already present in the string.","params":[{"name":"value","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":213,"path":"src/Editors/Writer.lua"}},{"name":"Vector3","desc":"Writes a `Vector3` using 3 `Float32`s","params":[{"name":"value","desc":"","lua_type":"Vector3"}],"returns":[],"function_type":"method","source":{"line":226,"path":"src/Editors/Writer.lua"}},{"name":"Vector3int16","desc":"Writes a `Vector3int16` using 3 `Int16`s","params":[{"name":"value","desc":"","lua_type":"Vector3int16"}],"returns":[],"function_type":"method","source":{"line":240,"path":"src/Editors/Writer.lua"}},{"name":"Vector2","desc":"Writes a `Vector2` using 2 `Int32`s","params":[{"name":"value","desc":"","lua_type":"Vector2"}],"returns":[],"function_type":"method","source":{"line":254,"path":"src/Editors/Writer.lua"}},{"name":"Vector2int16","desc":"Writes a `Vector2int16` using 2 `Int16`s","params":[{"name":"value","desc":"","lua_type":"Vector2int16"}],"returns":[],"function_type":"method","source":{"line":267,"path":"src/Editors/Writer.lua"}},{"name":"CFrame","desc":"Writes a `CFrame` using a 5 bit unsigned integer to specify an axis aligned case along with its `Vector3` position, if the `CFrame` isn\'t axis aligned, it will encode the `XVector`, `YVector` and, `ZVector` too","params":[{"name":"value","desc":"","lua_type":"CFrame"}],"returns":[],"function_type":"method","source":{"line":280,"path":"src/Editors/Writer.lua"}},{"name":"BrickColor","desc":"Writes a `BrickColor` using an 11 bit unsigned integer","params":[{"name":"value","desc":"","lua_type":"BrickColor"}],"returns":[],"function_type":"method","source":{"line":300,"path":"src/Editors/Writer.lua"}},{"name":"Color3","desc":"Writes 3 bytes, one for each RGB component","params":[{"name":"value","desc":"","lua_type":"Color3"}],"returns":[],"function_type":"method","source":{"line":312,"path":"src/Editors/Writer.lua"}},{"name":"UDim","desc":"Writes a `UDim` using a `Float32` and `Int32`","params":[{"name":"value","desc":"","lua_type":"UDim"}],"returns":[],"function_type":"method","source":{"line":326,"path":"src/Editors/Writer.lua"}},{"name":"UDim2","desc":"Writes a `UDim2` using two `UDim`s","params":[{"name":"value","desc":"","lua_type":"UDim2"}],"returns":[],"function_type":"method","source":{"line":339,"path":"src/Editors/Writer.lua"}},{"name":"NumberRange","desc":"Writes a `NumberRange` using two `Float32`s","params":[{"name":"value","desc":"","lua_type":"NumberRange"}],"returns":[],"function_type":"method","source":{"line":352,"path":"src/Editors/Writer.lua"}},{"name":"Enum","desc":"Writes an `EnumItem` using two `UInt12`s, will only use 1 if an `enumType` is already specified.","params":[{"name":"value","desc":"","lua_type":"EnumItem"},{"name":"enumType","desc":"If specified, it will skip the encoding of the `EnumType`","lua_type":"Enum?"}],"returns":[],"function_type":"method","source":{"line":366,"path":"src/Editors/Writer.lua"}},{"name":"ColorSequence","desc":"Encodes a `ColorSequence` using an unsigned 5 bit integer for the length, then a `Float32` for the `Time` and a `Color3` for the `Value` of each keypoint","params":[{"name":"value","desc":"","lua_type":"ColorSequence"}],"returns":[],"function_type":"method","source":{"line":382,"path":"src/Editors/Writer.lua"}},{"name":"NumberSequence","desc":"Encodes a `NumberSequence` using an unsigned 5 bit integer for the length, then a `Float32` for the `Time`, `Value` and `Envelope` of each keypoint","params":[{"name":"value","desc":"","lua_type":"NumberSequence"},{"name":"writeEnvelope","desc":"Whether or not to include the `Envelope` in the output, defaults to `false`","lua_type":"boolean?"}],"returns":[],"function_type":"method","source":{"line":399,"path":"src/Editors/Writer.lua"}},{"name":"UInt8","desc":"Writes an 8 bit unsigned integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":418,"path":"src/Editors/Writer.lua"}},{"name":"UInt16","desc":"Writes a 16 bit unsigned integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":428,"path":"src/Editors/Writer.lua"}},{"name":"UInt24","desc":"Writes a 24 bit unsigned integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":438,"path":"src/Editors/Writer.lua"}},{"name":"UInt32","desc":"Writes a 32 bit unsigned integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":448,"path":"src/Editors/Writer.lua"}},{"name":"Int8","desc":"Writes an 8 bit signed integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":458,"path":"src/Editors/Writer.lua"}},{"name":"Int16","desc":"Writes a 16 bit signed integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":468,"path":"src/Editors/Writer.lua"}},{"name":"Int24","desc":"Writes a 24 bit signed integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":478,"path":"src/Editors/Writer.lua"}},{"name":"Int32","desc":"Writes a 32 bit signed integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":488,"path":"src/Editors/Writer.lua"}},{"name":"Float16","desc":"Writes a half-precision floating point number","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":498,"path":"src/Editors/Writer.lua"}},{"name":"Float32","desc":"Writes a single-precision floating point number","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":508,"path":"src/Editors/Writer.lua"}},{"name":"Float64","desc":"Writes a double-precision floating point number","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":518,"path":"src/Editors/Writer.lua"}}],"properties":[],"types":[],"name":"Writer","desc":"Writes values to a buffer, the offset will increment automatically.","source":{"line":18,"path":"src/Editors/Writer.lua"}}')}}]);