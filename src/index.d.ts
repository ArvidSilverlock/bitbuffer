type write<T> = (b: buffer, byte: number, bit: number, value: T) => void
type read<T> = (b: buffer, byte: number, bit: number) => T

declare interface bitbuffer {
	writeu1: write<number>;
	writeu2: write<number>;
	writeu3: write<number>;
	writeu4: write<number>;
	writeu5: write<number>;
	writeu6: write<number>;
	writeu7: write<number>;
	writeu8: write<number>;
	writeu9: write<number>;
	writeu10: write<number>;
	writeu11: write<number>;
	writeu12: write<number>;
	writeu13: write<number>;
	writeu14: write<number>;
	writeu15: write<number>;
	writeu16: write<number>;
	writeu17: write<number>;
	writeu18: write<number>;
	writeu19: write<number>;
	writeu20: write<number>;
	writeu21: write<number>;
	writeu22: write<number>;
	writeu23: write<number>;
	writeu24: write<number>;
	writeu25: write<number>;
	writeu26: write<number>;
	writeu27: write<number>;
	writeu28: write<number>;
	writeu29: write<number>;
	writeu30: write<number>;
	writeu31: write<number>;
	writeu32: write<number>;
	writeu33: write<number>;
	writeu34: write<number>;
	writeu35: write<number>;
	writeu36: write<number>;
	writeu37: write<number>;
	writeu38: write<number>;
	writeu39: write<number>;
	writeu40: write<number>;
	writeu41: write<number>;
	writeu42: write<number>;
	writeu43: write<number>;
	writeu44: write<number>;
	writeu45: write<number>;
	writeu46: write<number>;
	writeu47: write<number>;
	writeu48: write<number>;
	writeu49: write<number>;
	writeu50: write<number>;
	writeu51: write<number>;
	writeu52: write<number>;
	writeu53: write<number>;

	readu1: read<number>;
	readu2: read<number>;
	readu3: read<number>;
	readu4: read<number>;
	readu5: read<number>;
	readu6: read<number>;
	readu7: read<number>;
	readu8: read<number>;
	readu9: read<number>;
	readu10: read<number>;
	readu11: read<number>;
	readu12: read<number>;
	readu13: read<number>;
	readu14: read<number>;
	readu15: read<number>;
	readu16: read<number>;
	readu17: read<number>;
	readu18: read<number>;
	readu19: read<number>;
	readu20: read<number>;
	readu21: read<number>;
	readu22: read<number>;
	readu23: read<number>;
	readu24: read<number>;
	readu25: read<number>;
	readu26: read<number>;
	readu27: read<number>;
	readu28: read<number>;
	readu29: read<number>;
	readu30: read<number>;
	readu31: read<number>;
	readu32: read<number>;
	readu33: read<number>;
	readu34: read<number>;
	readu35: read<number>;
	readu36: read<number>;
	readu37: read<number>;
	readu38: read<number>;
	readu39: read<number>;
	readu40: read<number>;
	readu41: read<number>;
	readu42: read<number>;
	readu43: read<number>;
	readu44: read<number>;
	readu45: read<number>;
	readu46: read<number>;
	readu47: read<number>;
	readu48: read<number>;
	readu49: read<number>;
	readu50: read<number>;
	readu51: read<number>;
	readu52: read<number>;
	readu53: read<number>;

	readu: Array<read<number>>
	writeu: Array<write<number>>

	writei2: write<number>;
	writei3: write<number>;
	writei4: write<number>;
	writei5: write<number>;
	writei6: write<number>;
	writei7: write<number>;
	writei8: write<number>;
	writei9: write<number>;
	writei10: write<number>;
	writei11: write<number>;
	writei12: write<number>;
	writei13: write<number>;
	writei14: write<number>;
	writei15: write<number>;
	writei16: write<number>;
	writei17: write<number>;
	writei18: write<number>;
	writei19: write<number>;
	writei20: write<number>;
	writei21: write<number>;
	writei22: write<number>;
	writei23: write<number>;
	writei24: write<number>;
	writei25: write<number>;
	writei26: write<number>;
	writei27: write<number>;
	writei28: write<number>;
	writei29: write<number>;
	writei30: write<number>;
	writei31: write<number>;
	writei32: write<number>;
	writei33: write<number>;
	writei34: write<number>;
	writei35: write<number>;
	writei36: write<number>;
	writei37: write<number>;
	writei38: write<number>;
	writei39: write<number>;
	writei40: write<number>;
	writei41: write<number>;
	writei42: write<number>;
	writei43: write<number>;
	writei44: write<number>;
	writei45: write<number>;
	writei46: write<number>;
	writei47: write<number>;
	writei48: write<number>;
	writei49: write<number>;
	writei50: write<number>;
	writei51: write<number>;
	writei52: write<number>;

	readi2: read<number>;
	readi3: read<number>;
	readi4: read<number>;
	readi5: read<number>;
	readi6: read<number>;
	readi7: read<number>;
	readi8: read<number>;
	readi9: read<number>;
	readi10: read<number>;
	readi11: read<number>;
	readi12: read<number>;
	readi13: read<number>;
	readi14: read<number>;
	readi15: read<number>;
	readi16: read<number>;
	readi17: read<number>;
	readi18: read<number>;
	readi19: read<number>;
	readi20: read<number>;
	readi21: read<number>;
	readi22: read<number>;
	readi23: read<number>;
	readi24: read<number>;
	readi25: read<number>;
	readi26: read<number>;
	readi27: read<number>;
	readi28: read<number>;
	readi29: read<number>;
	readi30: read<number>;
	readi31: read<number>;
	readi32: read<number>;
	readi33: read<number>;
	readi34: read<number>;
	readi35: read<number>;
	readi36: read<number>;
	readi37: read<number>;
	readi38: read<number>;
	readi39: read<number>;
	readi40: read<number>;
	readi41: read<number>;
	readi42: read<number>;
	readi43: read<number>;
	readi44: read<number>;
	readi45: read<number>;
	readi46: read<number>;
	readi47: read<number>;
	readi48: read<number>;
	readi49: read<number>;
	readi50: read<number>;
	readi51: read<number>;
	readi52: read<number>;

	readi: Array<read<number>>
	writei: Array<write<number>>

	writef16: write<number>;
	writef32: write<number>;
	writef64: write<number>;

	readf16: read<number>;
	readf32: read<number>;
	readf64: read<number>;

	writestring: write<string>;
	readstring: read<string>;

	fill: (b: buffer, byte: number, bit: number, value: number, count?: number) => void;

	copy: (
		target: buffer,
		targetByte: number,
		targetBit: number,
		source: buffer,
		sourceByte?: number,
		sourceBit?: number,
		count?: number
	) => void;

	tobinary: (b: buffer, separator?: string) => string;
	frombinary: (str: string, separator?: string) => buffer;

	tohexadecimal: (b: buffer, separator?: string) => string;
	fromhexadecimal: (str: string, separator?: string) => buffer;

	tobase64: (b: buffer) => string;
	frombase64: (str: string) => buffer;

	reader: (b: buffer) => Reader;
	writer: (b: buffer) => Writer;
}

declare interface Writer {
	IncrementOffset: (amount: number) => void;
	SetOffset: (byte: number, bit?: number) => void;
	Align: () => void;

	UInt1: (value: number) => void;
	UInt2: (value: number) => void;
	UInt3: (value: number) => void;
	UInt4: (value: number) => void;
	UInt5: (value: number) => void;
	UInt6: (value: number) => void;
	UInt7: (value: number) => void;
	UInt8: (value: number) => void;
	UInt9: (value: number) => void;
	UInt10: (value: number) => void;
	UInt11: (value: number) => void;
	UInt12: (value: number) => void;
	UInt13: (value: number) => void;
	UInt14: (value: number) => void;
	UInt15: (value: number) => void;
	UInt16: (value: number) => void;
	UInt17: (value: number) => void;
	UInt18: (value: number) => void;
	UInt19: (value: number) => void;
	UInt20: (value: number) => void;
	UInt21: (value: number) => void;
	UInt22: (value: number) => void;
	UInt23: (value: number) => void;
	UInt24: (value: number) => void;
	UInt25: (value: number) => void;
	UInt26: (value: number) => void;
	UInt27: (value: number) => void;
	UInt28: (value: number) => void;
	UInt29: (value: number) => void;
	UInt30: (value: number) => void;
	UInt31: (value: number) => void;
	UInt32: (value: number) => void;
	UInt33: (value: number) => void;
	UInt34: (value: number) => void;
	UInt35: (value: number) => void;
	UInt36: (value: number) => void;
	UInt37: (value: number) => void;
	UInt38: (value: number) => void;
	UInt39: (value: number) => void;
	UInt40: (value: number) => void;
	UInt41: (value: number) => void;
	UInt42: (value: number) => void;
	UInt43: (value: number) => void;
	UInt44: (value: number) => void;
	UInt45: (value: number) => void;
	UInt46: (value: number) => void;
	UInt47: (value: number) => void;
	UInt48: (value: number) => void;
	UInt49: (value: number) => void;
	UInt50: (value: number) => void;
	UInt51: (value: number) => void;
	UInt52: (value: number) => void;
	UInt53: (value: number) => void;

	Int2: (value: number) => void;
	Int3: (value: number) => void;
	Int4: (value: number) => void;
	Int5: (value: number) => void;
	Int6: (value: number) => void;
	Int7: (value: number) => void;
	Int8: (value: number) => void;
	Int9: (value: number) => void;
	Int10: (value: number) => void;
	Int11: (value: number) => void;
	Int12: (value: number) => void;
	Int13: (value: number) => void;
	Int14: (value: number) => void;
	Int15: (value: number) => void;
	Int16: (value: number) => void;
	Int17: (value: number) => void;
	Int18: (value: number) => void;
	Int19: (value: number) => void;
	Int20: (value: number) => void;
	Int21: (value: number) => void;
	Int22: (value: number) => void;
	Int23: (value: number) => void;
	Int24: (value: number) => void;
	Int25: (value: number) => void;
	Int26: (value: number) => void;
	Int27: (value: number) => void;
	Int28: (value: number) => void;
	Int29: (value: number) => void;
	Int30: (value: number) => void;
	Int31: (value: number) => void;
	Int32: (value: number) => void;
	Int33: (value: number) => void;
	Int34: (value: number) => void;
	Int35: (value: number) => void;
	Int36: (value: number) => void;
	Int37: (value: number) => void;
	Int38: (value: number) => void;
	Int39: (value: number) => void;
	Int40: (value: number) => void;
	Int41: (value: number) => void;
	Int42: (value: number) => void;
	Int43: (value: number) => void;
	Int44: (value: number) => void;
	Int45: (value: number) => void;
	Int46: (value: number) => void;
	Int47: (value: number) => void;
	Int48: (value: number) => void;
	Int49: (value: number) => void;
	Int50: (value: number) => void;
	Int51: (value: number) => void;
	Int52: (value: number) => void;

	Float16: (value: number) => void;
	Float32: (value: number) => void;
	Float64: (value: number) => void;

	NumberSequence: (value: NumberSequence) => void;
	ColorSequence: (value: ColorSequence) => void;
	CFrame: (value: CFrame) => void;
	Boolean: (value: boolean) => void;
	LosslessCFrame: (value: CFrame) => void;
	NumberRange: (value: NumberRange) => void;
	Vector3int16: (value: Vector3int16) => void;
	Vector2int16: (value: Vector2int16) => void;
	UDim2: (value: UDim2) => void;
	NumberSequenceKeypoint: (value: NumberSequenceKeypoint) => void;
	BrickColor: (value: BrickColor) => void;
	Vector2: (value: Vector2) => void;
	UDim: (value: UDim) => void;
	Color3: (value: Color3) => void;
	ColorSequenceKeypoint: (value: ColorSequenceKeypoint) => void;
	Vector3: (value: Vector3) => void;
}

declare interface Reader {
	IncrementOffset: (amount: number) => void;
	SetOffset: (byte: number, bit?: number) => void;
	Align: () => void;

	UInt1: () => number;
	UInt2: () => number;
	UInt3: () => number;
	UInt4: () => number;
	UInt5: () => number;
	UInt6: () => number;
	UInt7: () => number;
	UInt8: () => number;
	UInt9: () => number;
	UInt10: () => number;
	UInt11: () => number;
	UInt12: () => number;
	UInt13: () => number;
	UInt14: () => number;
	UInt15: () => number;
	UInt16: () => number;
	UInt17: () => number;
	UInt18: () => number;
	UInt19: () => number;
	UInt20: () => number;
	UInt21: () => number;
	UInt22: () => number;
	UInt23: () => number;
	UInt24: () => number;
	UInt25: () => number;
	UInt26: () => number;
	UInt27: () => number;
	UInt28: () => number;
	UInt29: () => number;
	UInt30: () => number;
	UInt31: () => number;
	UInt32: () => number;
	UInt33: () => number;
	UInt34: () => number;
	UInt35: () => number;
	UInt36: () => number;
	UInt37: () => number;
	UInt38: () => number;
	UInt39: () => number;
	UInt40: () => number;
	UInt41: () => number;
	UInt42: () => number;
	UInt43: () => number;
	UInt44: () => number;
	UInt45: () => number;
	UInt46: () => number;
	UInt47: () => number;
	UInt48: () => number;
	UInt49: () => number;
	UInt50: () => number;
	UInt51: () => number;
	UInt52: () => number;
	UInt53: () => number;

	Int2: () => number;
	Int3: () => number;
	Int4: () => number;
	Int5: () => number;
	Int6: () => number;
	Int7: () => number;
	Int8: () => number;
	Int9: () => number;
	Int10: () => number;
	Int11: () => number;
	Int12: () => number;
	Int13: () => number;
	Int14: () => number;
	Int15: () => number;
	Int16: () => number;
	Int17: () => number;
	Int18: () => number;
	Int19: () => number;
	Int20: () => number;
	Int21: () => number;
	Int22: () => number;
	Int23: () => number;
	Int24: () => number;
	Int25: () => number;
	Int26: () => number;
	Int27: () => number;
	Int28: () => number;
	Int29: () => number;
	Int30: () => number;
	Int31: () => number;
	Int32: () => number;
	Int33: () => number;
	Int34: () => number;
	Int35: () => number;
	Int36: () => number;
	Int37: () => number;
	Int38: () => number;
	Int39: () => number;
	Int40: () => number;
	Int41: () => number;
	Int42: () => number;
	Int43: () => number;
	Int44: () => number;
	Int45: () => number;
	Int46: () => number;
	Int47: () => number;
	Int48: () => number;
	Int49: () => number;
	Int50: () => number;
	Int51: () => number;
	Int52: () => number;

	Float16: () => number;
	Float32: () => number;
	Float64: () => number;

	NumberSequence: () => NumberSequence;
	ColorSequence: () => ColorSequence;
	CFrame: () => CFrame;
	Boolean: () => boolean;
	LosslessCFrame: () => CFrame;
	NumberRange: () => NumberRange;
	Vector3int16: () => Vector3int16;
	Vector2int16: () => Vector2int16;
	UDim2: () => UDim2;
	NumberSequenceKeypoint: () => NumberSequenceKeypoint;
	BrickColor: () => BrickColor;
	Vector2: () => Vector2;
	UDim: () => UDim;
	Color3: () => Color3;
	ColorSequenceKeypoint: () => ColorSequenceKeypoint;
	Vector3: () => Vector3;
}

declare const bitbuffer: bitbuffer;
export = bitbuffer