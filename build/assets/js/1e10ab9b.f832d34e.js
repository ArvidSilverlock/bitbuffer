"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[264],{58625:e=>{e.exports=JSON.parse('{"functions":[{"name":"Variadic","desc":"Writes any amount of values using one write function","params":[{"name":"writeCallback","desc":"","lua_type":"<T>(self, value: T) -> ()"},{"name":"...","desc":"","lua_type":"T"}],"returns":[],"function_type":"method","source":{"line":71,"path":"src/Manipulators/Writer.lua"}},{"name":"UInt","desc":"Writes an unsigned integer of any width from 1-53","params":[{"name":"value","desc":"The uint to write","lua_type":"number"},{"name":"width","desc":"The bit width of the `value`","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":86,"path":"src/Manipulators/Writer.lua"}},{"name":"Int","desc":"Writes a signed integer of any width from 1-53, note that one of these bits is used as the sign","params":[{"name":"value","desc":"","lua_type":"number"},{"name":"width","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":100,"path":"src/Manipulators/Writer.lua"}},{"name":"Boolean","desc":"Writes a boolean","params":[{"name":"value","desc":"","lua_type":"boolean"}],"returns":[],"function_type":"method","source":{"line":112,"path":"src/Manipulators/Writer.lua"}},{"name":"String","desc":"Writes a string with its length encoded using a specified number of bits","params":[{"name":"value","desc":"","lua_type":"string"},{"name":"lengthWidth","desc":"Amount of bits to encode the string length with, defaults to 16","lua_type":"number?"}],"returns":[],"function_type":"method","source":{"line":125,"path":"src/Manipulators/Writer.lua"}},{"name":"NullTerminatedString","desc":"Writes a string until it finds a character with the value of 0, if one is not found, it will write one on the end","params":[{"name":"value","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":143,"path":"src/Manipulators/Writer.lua"}},{"name":"Vector3","desc":"Writes a `Vector3` using 3 `Float32`s","params":[{"name":"value","desc":"","lua_type":"Vector3"}],"returns":[],"function_type":"method","source":{"line":164,"path":"src/Manipulators/Writer.lua"}},{"name":"Vector3int16","desc":"Writes a `Vector3int16` using 3 `Int16`s","params":[{"name":"value","desc":"","lua_type":"Vector3int16"}],"returns":[],"function_type":"method","source":{"line":178,"path":"src/Manipulators/Writer.lua"}},{"name":"Vector2","desc":"Writes a `Vector2` using 2 `Int32`s","params":[{"name":"value","desc":"","lua_type":"Vector2"}],"returns":[],"function_type":"method","source":{"line":192,"path":"src/Manipulators/Writer.lua"}},{"name":"Vector2int16","desc":"Writes a `Vector2int16` using 2 `Int16`s","params":[{"name":"value","desc":"","lua_type":"Vector2int16"}],"returns":[],"function_type":"method","source":{"line":205,"path":"src/Manipulators/Writer.lua"}},{"name":"CFrame","desc":"Writes a `CFrame` using a 5 bit unsigned integer to specify an axis aligned case along with its `Vector3` position, if the `CFrame` isn\'t axis aligned, it will encode the `XVector`, `YVector` and, `ZVector` too","params":[{"name":"value","desc":"","lua_type":"CFrame"}],"returns":[],"function_type":"method","source":{"line":218,"path":"src/Manipulators/Writer.lua"}},{"name":"BrickColor","desc":"Writes a `BrickColor` using an 11 bit unsigned integer","params":[{"name":"value","desc":"","lua_type":"BrickColor"}],"returns":[],"function_type":"method","source":{"line":238,"path":"src/Manipulators/Writer.lua"}},{"name":"Color3","desc":"Writes 3 bytes, one for each RGB component","params":[{"name":"value","desc":"","lua_type":"Color3"}],"returns":[],"function_type":"method","source":{"line":250,"path":"src/Manipulators/Writer.lua"}},{"name":"UDim","desc":"Writes a `UDim` using a `Float32` and `Int32`","params":[{"name":"value","desc":"","lua_type":"UDim"}],"returns":[],"function_type":"method","source":{"line":264,"path":"src/Manipulators/Writer.lua"}},{"name":"UDim2","desc":"Writes a `UDim2` using two `UDim`s","params":[{"name":"value","desc":"","lua_type":"UDim2"}],"returns":[],"function_type":"method","source":{"line":277,"path":"src/Manipulators/Writer.lua"}},{"name":"NumberRange","desc":"Writes a `NumberRange` using two `Float32`s","params":[{"name":"value","desc":"","lua_type":"NumberRange"}],"returns":[],"function_type":"method","source":{"line":290,"path":"src/Manipulators/Writer.lua"}},{"name":"Enum","desc":"If no `enumType` is specified, it will encode the `EnumItem.Type`, then encode the `EnumItem` using unsigned integers whose widths depend on the amount of possible values.\\n\\nThis is good for short term usage, such as sending over the network, but, bad for long term storage (i.e., storing in a datastore), this is because a roblox update might add aditional `Enum`s or `EnumItems`, altering the required value widths","params":[{"name":"value","desc":"","lua_type":"EnumItem"},{"name":"enumType","desc":"If specified, it will skip the encoding of the `EnumType`","lua_type":"Enum?"}],"returns":[],"function_type":"method","source":{"line":306,"path":"src/Manipulators/Writer.lua"}},{"name":"ColorSequence","desc":"Encodes a `ColorSequence` using an unsigned 5 bit integer for the length, then a `Float32` for the `Time` and a `Color3` for the `Value` of each keypoint","params":[{"name":"value","desc":"","lua_type":"ColorSequence"}],"returns":[],"function_type":"method","source":{"line":322,"path":"src/Manipulators/Writer.lua"}},{"name":"NumberSequence","desc":"Encodes a `NumberSequence` using an unsigned 5 bit integer for the length, then a `Float32` for the `Time`, `Value` and `Envelope` of each keypoint","params":[{"name":"value","desc":"","lua_type":"NumberSequence"},{"name":"writeEnvelope","desc":"Whether or not to include the `Envelope` in the output","lua_type":"boolean?"}],"returns":[],"function_type":"method","source":{"line":339,"path":"src/Manipulators/Writer.lua"}},{"name":"UInt8","desc":"Writes an 8 bit unsigned integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":358,"path":"src/Manipulators/Writer.lua"}},{"name":"UInt16","desc":"Writes a 16 bit unsigned integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":368,"path":"src/Manipulators/Writer.lua"}},{"name":"UInt24","desc":"Writes a 24 bit unsigned integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":378,"path":"src/Manipulators/Writer.lua"}},{"name":"UInt32","desc":"Writes a 32 bit unsigned integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":388,"path":"src/Manipulators/Writer.lua"}},{"name":"Int8","desc":"Writes an 8 bit signed integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":398,"path":"src/Manipulators/Writer.lua"}},{"name":"Int16","desc":"Writes a 16 bit signed integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":408,"path":"src/Manipulators/Writer.lua"}},{"name":"Int24","desc":"Writes a 24 bit signed integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":418,"path":"src/Manipulators/Writer.lua"}},{"name":"Int32","desc":"Writes a 32 bit signed integer","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":428,"path":"src/Manipulators/Writer.lua"}},{"name":"Float16","desc":"Writes a half-precision floating point number","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":438,"path":"src/Manipulators/Writer.lua"}},{"name":"Float32","desc":"Writes a single-precision floating point number","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":448,"path":"src/Manipulators/Writer.lua"}},{"name":"Float64","desc":"Writes a double-precision floating point number","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":458,"path":"src/Manipulators/Writer.lua"}}],"properties":[],"types":[],"name":"Writer","desc":"","source":{"line":59,"path":"src/Manipulators/Writer.lua"}}')}}]);